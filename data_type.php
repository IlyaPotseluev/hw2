Язык PHP является слабо типизированным, или динамически типизированным. <br>
В PHP тип переменной определяется типом присвоенного ей значения. <br>

Типы данных PHP: <br>

* Integer(целый) - используется для представления целых чисел.<br>
* Float, также называемый double(двойной точности) - используется для представления действительных чисел.<br>
* String (строковый) - используется для представления строк символов.<br>
* Boolean (булевский) - используется для хранения значений true(истина) и false(ложь).<br>
* Array (массив) - используется для хранения нескольких элементов данных.<br>
* Object (объект) - используется для хранения экземпляров класса.<br>

Также доступны два специальных типа - NULL и resource(ресурс).<br>

* Переменные, которым не присвоены конкретные значения, которые не определены<br>
или принимают значение NULL, относятся к типу NULL.<br>

* Некоторые встроенные функции(такие, как функции работы с базами данных)<br>
возвращают переменные ресурсного типа. Такие переменные представляют <br>
внешние ресурсы(например, соединения с базами данных). <br>
Они часто возвращаются одними функциями и передаются<br>
в качестве параметров в другие функции.<br>

 <?php

$integer = 108;
$float = 3.14;
$string = 'str';
$boolean = TRUE;
$empty = NULL;
//$res = resource;
class A 
{ public $obj;}
$object = new A; //экземпляр класса.
$array = [1,3.15, 'word',  $integer, $float, $string, $empty, $res];

foreach ($array as $element)
{echo $element.'<br>';} 

?>

Если сложить числа типа float и integer <br> 
суммой этих чисел будет число типа float. <br>

<?php
$integer = 108;
$float = 3.14;
echo $float + $integer.'<br><br>'; //выведет 111.14
?>

Приведение типов. <br>
 Допускаются следующие приведения типов:<br>

    (int), (integer) - приведение к integer<br>
    (bool), (boolean) - приведение к boolean<br>
    (float), (double), (real) - приведение к float<br>
    (string) - приведение к string<br>
    (array) - приведение к array<br>
    (object) - приведение к object<br>
    (unset) - приведение к NULL (PHP 5)<br><br>
<?php
$integer = 108;
$float = 3.14; 

$float = (int)$float; //дробная часть отбросится. 
echo $float.'<br><hr><br>';
?>
Задание 2: Функции округления <br>
<?php

$floatarray = [ -0.094, 0.4, 0.5, 21.21];

foreach ($floatarray as $element)
{ echo "Для числа $element : <br>";
echo 'Математическое округление = '.round($element).'<br>'; //математическое округление. до 0.4 = 0. после 0.5 = 1.
echo 'Округление в большую сторону = '.ceil($element).'<br>';  //округление дроби в большую сторону. 
echo 'Округление в меньшую сторону = '.floor($element).'<br><br>'; //округление дроби в меньшую сторону.
}
echo '<br>';
?>
<hr>
Задание 3: Массивы <br>
Ассоциативный массив - массив, в котором с каждым значением его элемента можно связать(ассоциировать) любой ключ(индекс).<br><br>
<?php
$arr = ['B'=>'bird', 'A'=> 'dog' , 'b'=>'cat', 'a'=> 'bear'];
 print_r($arr);
 echo' - массив до сортировки <br><br>';
echo ' sort() - упорядочивает массив в алфавитном и(или) цифровом порядке. <br>
	   asort() - упорядочивает массив в соответствии со значениями элементов. Используется в ассоциативных массивах. <br>
	   ksort() - упорядочивает массив по значению ключей.<br>';	

	  
	   for($i=0;$i<3; $i++)
{$arr = ['B'=>'bird', 'A'=> 'dog' , 'b'=>'cat', 'a'=> 'bear']; //для наглядности сделал этот массив ассоциативного типа, т.к. иначе отличие функций sort() и ksort() не будет выявлено.
if ($i==0) 
	{sort($arr);
	print_r($arr);
	echo ' - функция sort() <br>'; /* рассматривает данный массив как простой массив и сортирует его соответственно, 
							присваивая каждому элементу по порядку индекс типа integer*/
	}
	
	elseif($i==1)
	{ asort($arr);
	  print_r($arr);
	  echo ' - функция asort() <br>'; //сортирует массив по значениям элементов, в данном случае, в алфавитном порядке.
	}
	else { ksort($arr); 
			print_r($arr);
			echo ' -  функция ksort()'; //сортирует массив по значению ключа.
	}
	  } unset($arr);

	
?>
<br> Многомерный массив - массив, имеющий 2 и более измерений,<br>
 т.е. содержащий в себе сочетание нескольких строк и столбцов, имеющий вид матрицы, <br>
 способный хранить в себе несколько массивов.<br>

 <?php

$classmates = [ 'Alexey' => ['age'=>'23 y.o.'],
				'Nastya' => ['age'=> '19 y.o.'],
				'Lilya' =>  ['age'=> '18 y.o.'],
				' Artem'=>  ['age'=> '20 y.o.'],
				'Fedor' =>	['age'=> '18 y.o.'],
				'Stanislav'=>['age'=> '22 y.o.'],
				'Kirill' =>['age'=> '17 y.o.'],
				'Vlad' => ['age'=> '21 y.o.'],
				'Anton'=>['age'=> '22 y.o.']

			  ];
//print_r($classmates);
//echo '<br>';


function compare($x,$y)
{ if ($x==$y) //сортировка массива по значению столбца 'age'
	{return 0;}
elseif ($x<$y)
	{return -1;}
else {return 1;}
	}

	uasort ($classmates, 'compare'); //в данном случае использована функция uasort, а не usort,
					//т.к. последняя не предназначена для ассоциативных массивов и присваивает имени студента индекс типа int.
echo '<pre>';
	print_r ($classmates);
echo '</pre>';
	?>
<hr>
<br><br>Анонимные функции, также известные как замыкания (closures)- позволяют создавать функции, не имеющие определенных имен.<br>

<?php

$classmates = [ 'Alexey' => ['age'=>'23 y.o.'],
				'Nastya' => ['age'=> '19 y.o.'],
				'Lilya' =>  ['age'=> '18 y.o.'],
				' Artem'=>  ['age'=> '20 y.o.'],
				'Fedor' =>	['age'=> '18 y.o.'],
				'Stanislav'=>['age'=> '22 y.o.'],
				'Kirill' =>['age'=> '17 y.o.'],
				'Vlad' => ['age'=> '21 y.o.'],
				'Anton'=>['age'=> '22 y.o.']

			  ];
//print_r($classmates);
//echo '<br>';

function anoninside($age)
{
 return function($x,$y) use ($age)
{ if ($x[$age]==$y[$age]) //сортировка массива по значению столбца 'age'
	{return 0;}
elseif ($x[$age]<$y[$age])
	{return 1;}
else {return -1;}
}; 
}
uasort ($classmates, anoninside('age')); 

echo '<pre>';
	print_r ($classmates);
echo '</pre>.<hr>';
  
 //----------------------------
echo '<h4> Задание - реверс массива </h4>';
 $hello = ['h','e','l','l','o']; 
$b=array_reverse($hello);
print_r($b);

?>

